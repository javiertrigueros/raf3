<?php

/**
 * PluginarTagTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginarTagTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PluginarTagTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PluginarTag');
    }
    
    /**
     * devuelve tags por array de ids
     *
     * @param <array $ids> 
     * 
     * @return <array>
     */
    public static function getByIds($ids)
    {
        $q = Doctrine_Query::create()
            ->from('arTag d')
            ->whereIn('d.id',$ids);
        
        return $q->execute();
    }
    
    public static function getByHash($hash)
    {
        $q = Doctrine_Query::create()
            ->from('arTag d')
            ->whereIn('d.hash',$hash);
        
        return $q->fetchOne();
    }
    
    public static function getUserTagsCount($profileId)
    {
         $q = Doctrine::getTable('arWallMessage')->createQuery('m')
                ->leftJoin('m.User u')
                ->leftJoin('u.Friends f ON ((f.profile_id = u.id) OR (f.friend_id = u.id))')
                ->leftJoin('m.arWallMessageHasProfileList mhpl')
                ->leftJoin('mhpl.List l')
                ->leftJoin('l.arProfileListHasProfile plhp')
                ->where('l.profile_id = ? OR plhp.profile_id = ?', array($profileId, $profileId))
                ->orWhere('l.profile_id is NULL 
                                AND f.is_accept = true 
                                AND f.is_ignore = false 
                                AND ((f.profile_id = ?) OR (f.friend_id = ?))',array($profileId, $profileId))
                ->andWhere('m.published_at <= NOW()')
                ->groupBy('m.id')
                ->andWhere('m.is_publish = true')
                ->select('m.id as id');
                 
         //echo $q->getSqlQuery();
         
         $messages = $q->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
         
         $q = Doctrine::getTable('arTagHasArWallMessage')
                 ->createQuery('tm')
                 ->leftJoin('tm.Tag t')
                 ->whereIn('tm.wall_message_id',$messages)
                 ->groupBy('tm.tag_id')
                 ->select('count(tm.wall_message_id) as count, tm.id as id');
        
         //echo $q->getSqlQuery();
         return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
    }
   
    /**
     * listado de tags utilizados por un usuario
     * 
     * @param <int $userId>
     * @return <array>
     */
    public static function getUserTags($profileId)
    {
        
           $q = Doctrine::getTable('arWallMessage')->createQuery('m')
                ->leftJoin('m.User u')
                ->leftJoin('u.Friends f ON ((f.profile_id = u.id) OR (f.friend_id = u.id))')
                ->leftJoin('m.arWallMessageHasProfileList mhpl')
                ->leftJoin('mhpl.List l')
                ->leftJoin('l.arProfileListHasProfile plhp')
                ->where('(l.profile_id = ? OR plhp.profile_id = ?) 
                    OR (l.profile_id is NULL 
                                AND f.is_accept = true 
                                AND f.is_ignore = false  
                                AND ((f.profile_id = ?) OR (f.friend_id = ?)))', array($profileId, $profileId,$profileId, $profileId))
               
                ->andWhere('m.published_at <= NOW()')
                ->groupBy('m.id')
                ->andWhere('m.is_publish = true')
                ->select('m.id as id');
                 
         //echo $q->getSqlQuery();
         //TODO: hacer esto mejor
         $messages = $q->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
         
         $q = Doctrine::getTable('arTag')->createQuery('t')
                ->leftJoin('t.arTagHasArWallMessage tm')
                 ->whereIn('tm.wall_message_id',$messages)
                 ->orderBy('count DESC')
                 ->groupBy('tm.tag_id');
         
        if (sfConfig::get('app_arquematics_encrypt', false))
        {
            $q->leftJoin('t.EncContent ec')
              ->andWhere('ec.user_id = ?', $profileId)
              ->select('count(tm.wall_message_id) as countu,(count(*)) as count, t.id as id, t.name as name, t.hash as hash, ec.content as encContent,  tm.id as idm');
           
        }
        else {
             $q->select('count(*) as count, t.id as id, t.name as name, t.hash as hash');
        }
         
        /*TODO: Intentar esto mejor
        $q = Doctrine::getTable('arTag')->createQuery('t')
                ->leftJoin('t.arTagHasArWallMessage tm')
                ->leftJoin('tm.Message m')
                ->leftJoin('m.User u')
                ->leftJoin('u.Friends f ON ((f.profile_id = u.id) OR (f.friend_id = u.id))')
                ->leftJoin('m.arWallMessageHasProfileList mhpl')
                ->leftJoin('mhpl.List l')
                ->leftJoin('l.arProfileListHasProfile plhp')
                ->where('(l.profile_id = ? OR plhp.profile_id = ?) 
                    OR (l.profile_id is NULL 
                                AND f.is_accept = true 
                                AND f.is_ignore = false 
                                AND f.is_block = false 
                                AND ((f.profile_id = ?) OR (f.friend_id = ?)))', array($profileId, $profileId,$profileId, $profileId))
               
                ->andWhere('m.published_at <= NOW()')
                ->groupBy('m.id')
                ->andWhere('m.is_publish = true');
       
        if (sfConfig::get('app_arquematics_encrypt', false))
        {
             
            $q->leftJoin('t.EncContent ec')
                 ->select('count(tm.wall_message_id) as countu,(count(*)) as count, t.id as id, t.name as name, t.hash as hash, ec.content as encContent')
                 ->andWhere('ec.user_id = ?', $profileId);
        }
        else {
             $q->select('count(*) as count, t.id as id, t.name as name, t.hash as hash');
        }*/
        
        
        //echo $q->getSqlQuery();
        
        return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
    }
    
    public static function countTag($profileId, $tagId)
    {
           $q = Doctrine::getTable('arWallMessage')->createQuery('m')
                ->leftJoin('m.User u')
                ->leftJoin('u.Friends f ON ((f.profile_id = u.id) OR (f.friend_id = u.id))')
                ->leftJoin('m.arWallMessageHasProfileList mhpl')
                ->leftJoin('mhpl.List l')
                ->leftJoin('l.arProfileListHasProfile plhp')
                ->where('(l.profile_id = ? OR plhp.profile_id = ?) 
                    OR (l.profile_id is NULL 
                                AND f.is_accept = true 
                                AND f.is_ignore = false  
                                AND ((f.profile_id = ?) OR (f.friend_id = ?)))', array($profileId, $profileId,$profileId, $profileId))
               
                ->andWhere('m.published_at <= NOW()')
                ->groupBy('m.id')
                ->andWhere('m.is_publish = true')
                ->select('m.id as id');
                 
         //echo $q->getSqlQuery();
         
         $messages = $q->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
         
         $q = Doctrine::getTable('arTag')->createQuery('t')
                ->leftJoin('t.arTagHasArWallMessage tm')
                 ->whereIn('tm.wall_message_id',$messages)
                 ->andWhere('tm.tag_id = ?',$tagId)
                 ->groupBy('tm.tag_id')
                 ->select('(count(*)) as count');
         
        return $q->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
    }
    
    
    
    /**
     * array con las ids de los tags de un mensaje
     * 
     * @param <int $messageId>
     * @return array
     */
    public static function getTagIds($messageId)
    {
        $q = Doctrine::getTable('arTag')->createQuery('t')
                ->select('t.id as id')
                ->leftJoin('t.arTagHasArWallMessage tm')
                ->leftJoin('tm.Message m')
                ->where('tm.wall_message_id = ?',$messageId);
        
        //echo $q->getSqlQuery();
        return $q->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
    }
    
   
}