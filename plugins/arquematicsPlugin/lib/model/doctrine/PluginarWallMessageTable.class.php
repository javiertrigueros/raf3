<?php

/**
 * PluginarWallMessageTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginarWallMessageTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PluginarWallMessageTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PluginarWallMessage');
    }
    
    /**
     * Query con listado de mensajes
     * 
     * @param <string $order>
     * @return <query>
     */
    public function getMessageQuery($profileId, $order = 'DESC')
    {

        $q = Doctrine::getTable('arWallMessage')
                ->createQuery('m')
                ->leftJoin('m.User u')
                ->leftJoin('u.Friends f ON ((f.profile_id = u.id) OR (f.friend_id = u.id))')
                ->leftJoin('m.arWallMessageHasProfileList mhpl')
                ->leftJoin('mhpl.List l')
                ->leftJoin('l.arProfileListHasProfile plhp')
                ->where('(l.profile_id = ? OR plhp.profile_id = ?) 
                    OR (l.profile_id is NULL 
                                AND f.is_accept = true 
                                AND f.is_ignore = false  
                                AND ((f.profile_id = ?) OR (f.friend_id = ?)))', array($profileId, $profileId,$profileId, $profileId))
                ->andWhere('m.published_at <= NOW()')
                ->andWhere('m.is_publish = true')
                ->groupBy('m.id')
                ->select('m.id as id');
         

        $messageIds = $q->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR); 

        if ($messageIds && is_array($messageIds) && (count($messageIds) > 0))
        {
             $query = Doctrine::getTable('arWallMessage')
                ->createQuery('m')
                ->leftJoin('m.User u')
                ->leftJoin('m.Comments c')
                ->leftJoin('m.Gmaps g')
                ->leftJoin('m.LavernaDocs n')
                ->leftJoin('m.Links lin')
                ->leftJoin('m.DropFiles df')
                ->where("m.id IN (" . implode(",", $messageIds) . ")")    
                ->orderBy('m.created_at '.strtoupper($order). ', df.type '.strtoupper($order));
            
        }
        else if ($messageIds && !is_array($messageIds) && ($messageIds > 0))
        {
             $query = Doctrine::getTable('arWallMessage')
                ->createQuery('m')
                ->leftJoin('m.User u')
                ->leftJoin('m.Comments c')
                ->leftJoin('m.Gmaps g')
                ->leftJoin('m.LavernaDocs n')
                ->leftJoin('m.Links lin')
                ->leftJoin('m.DropFiles df')
                ->where('m.id = ?', $messageIds)    
                ->orderBy('m.created_at '.strtoupper($order). ', df.type '.strtoupper($order));
            
        }
        else {
             $query = Doctrine::getTable('arWallMessage')
                ->createQuery('m')
                ->leftJoin('m.User u')
                ->leftJoin('m.Comments c')
                ->leftJoin('m.Gmaps g')
                ->leftJoin('m.LavernaDocs n')
                ->leftJoin('m.Links lin')
                ->leftJoin('m.DropFiles df')
                ->where('m.id = ?', false)    
                ->orderBy('m.created_at '.strtoupper($order). ', df.type '.strtoupper($order));
        }
        
        if (sfConfig::get('app_arquematics_encrypt', false))
        {
           
           $query->leftJoin('m.EncContent ec ON (m.id = ec.wall_message_id)')
              ->andWhere('ec.user_id = ?',$profileId);
           
           $queryClone = clone $query;
           
           if ($queryClone->leftJoin('g.EncContent ecg ON (g.id = ecg.locate_id) OR (g.id is NULL)')
                   ->andWhere('ecg.user_id = ?',$profileId)
                   ->count() > 0)
           {
               $query->leftJoin('g.EncContent ecg ON (g.id = ecg.locate_id) OR (g.id is NULL)')
                   ->andWhere('ecg.user_id = ?',$profileId);
           }
           
           $queryClone = clone $query;
           
           if ($queryClone->leftJoin('n.EncContent ecn ON (n.id = ecn.laverna_id) OR (n.id is NULL)')
                   ->andWhere('ecn.user_id = ?',$profileId)
                   ->count() > 0)
           {
               $query->leftJoin('n.EncContent ecn ON (n.id = ecn.laverna_id) OR (n.id is NULL)')
                   ->andWhere('ecn.user_id = ?',$profileId);
           }

           $queryClone = clone $query;
           
           if ($queryClone->leftJoin('lin.EncContent ecnl ON (lin.id = ecnl.wall_link_id) OR (lin.id is NULL)')
                   ->andWhere('ecnl.user_id = ?',$profileId)
                   ->count() > 0)
           {
               $query->leftJoin('lin.EncContent ecnl ON (lin.id = ecnl.wall_link_id) OR (lin.id is NULL)')
                   ->andWhere('ecnl.user_id = ?',$profileId);
           }

           $queryClone = clone $query;

           if ($queryClone->leftJoin('df.EncContent ecdf ON (df.id = ecdf.drop_file_id) OR (df.id is NULL)')
                   ->andWhere('ecdf.user_id = ?',$profileId)
                   ->count() > 0)
           {
               $query->leftJoin('df.EncContent ecdf ON (df.id = ecdf.drop_file_id) OR (df.id is NULL)')
                   ->andWhere('ecdf.user_id = ?',$profileId);
           }


           $query->leftJoin('c.EncContent ce ON (c.id = ce.wall_comment_id)')
              ->andWhere('(c.id is NULL) OR (ce.user_id = ?)',$profileId);
              
        }
        
        //echo $query->getSqlQuery();
        //exit();
        return $query;
    }
    
    /**
     * cuenta los mensajes en el muro para un usuario
     * propios o ajenos
     * 
     * @param <string $order>
     * @return <int> 
     */
    public function countMessage($profileId)
    {
        $query = Doctrine_Core::getTable('arWallMessage')
                ->getMessageQuery($profileId)
                ->select('COUNT(m.id)');
        
        
        return $query->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
    }
    
    /**
     * cuenta los mensajes enviados por un usuario
     * 
     * @param <int $profileId>
     * @return <int>
     */
    public function countUserMessage($profileId)
    {
        $query = Doctrine::getTable('arWallMessage')
                ->createQuery('m')
                ->leftJoin('m.User u')
                ->where('u.id = ?',$profileId)
                ->select('COUNT(m.id)');
        
        return $query->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
    }
    
    /**
     * mensajes asociados con un blog o evento
     * 
     * @param <int $blogItemId>
     * @return <array of arWallMessage>
     */
    public function getMessagesByBlogId($blogItemId)
    {
         $q = Doctrine_Query::create()
            ->from('arWallMessage m')
            ->leftJoin('m.arWallMessageHasBlogItem mb')
            ->leftJoin('mb.Blog b')
            ->where("b.id = $blogItemId");
         
         //echo $q->getSqlQuery();
         return $q->execute();
    }
    /**
     * 
     * @param array $blogItemIds
     * @return <array of arWallMessage>
     */
    public function getMessagesByBlogIds($blogItemIds)
    {
         $q = Doctrine_Query::create()
            ->from('arWallMessage m')
            ->leftJoin('m.arWallMessageHasBlogItem mb')
            ->leftJoin('mb.Blog b')
             ->whereIn('b.id', $blogItemIds);

         return $q->execute();
    }
    
    /**
    * devuelve un registro por la id
    * 
    * @param <$id>
    * @return <arWallMessage>
    */
    public function retrieveById($id)
    {
        $query = Doctrine_Core::getTable('arWallMessage')
            ->createQuery('u')
            ->where('u.id = ?', $id);

        return $query->fetchOne();
    }
    
    public function getByIdAndUser($id, $profileId)
    {
         $q = Doctrine_Core::getTable('arWallMessage')
            ->createQuery('m')
            ->leftJoin('m.Gmaps g')
            ->leftJoin('m.LavernaDocs n')
            ->leftJoin('m.User u')
            ->where('m.id = ?', $id);
        
        if (sfConfig::get('app_arquematics_encrypt', false))
        {
           $q->leftJoin('g.EncContent ecg ON (g.id = ecg.locate_id AND ecg.user_id = ?) OR (g.id is NULL)',$profileId)
              ->andWhere('ecg.user_id = ?',$profileId);
           
           $q->leftJoin('n.EncContent ecn ON (n.id = ecn.locate_id) OR (n.id is NULL)')
                   ->andWhere('ecn.user_id = ?',$profileId);
           
           $q->leftJoin('m.EncContent ec')
              ->andWhere('ec.user_id = ?',$profileId);
        }
        
        return $q->fetchOne();
    }
}