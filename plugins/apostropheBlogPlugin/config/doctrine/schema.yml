options:
  type: INNODB

arExcerptEnc:
  actAs:
    Timestampable: ~
  columns:
    id:
      type: integer
      primary: true
      autoincrement: true
    user_id: integer
    a_blog_item_id: integer
    content: clob
  relations:
    BlogItem:
      class: aBlogItem
      local: a_blog_item_id
      foreign: id
      onDelete: CASCADE
    User:
      class: sfGuardUser
      local: user_id
      foreign: id
      foreignAlias: UserBlogItems

aBlogItem:
  actAs:
    Timestampable: ~
    Taggable: ~
    # The sluggable behavior seems to have trouble with inheritance (?) when
    # asked to uniqueify something, and we have our own implementation worked out
    # Do NOT invoke the Sluggable behavior here.
  columns:
    id:
      type: integer
      primary: true
      autoincrement: true
    author_id:
      type: integer
    page_id:
      type: integer
    title:
      type: string(255)
      notnull: true
    slug:
      type: varchar(255)
      notnull: true
    slug_saved:
      type: boolean
      default: false
    is_publish:
      type: boolean
      default: false
    is_save:
      type: boolean
      default: false
    excerpt:
      type: string
    # status:
    #  type: enum
    #  values: [draft, pending review, published ]
    #  notnull: true
    #  default: draft
    allow_comments:
      type: boolean
      default: true
    template:
      type: string(255)
      default: singleColumnTemplate
    published_at:
      type: timestamp
  relations:
    Author:
      class: sfGuardUser
      foreignAlias: BlogAuthorItems
      local: author_id
      foreign: id
      onDelete: SET NULL
    Editors:
      foreignAlias: BlogEditorItems
      class: sfGuardUser
      refClass: aBlogEditor
      local: blog_item_id
      foreign: user_id
    Page:
      class: aPage
      local: page_id
      foreign: id
      onDelete: CASCADE
      foreignAlias: BlogItem
      foreignType: one
    Categories:
      foreignAlias: BlogItems
      class: aCategory
      refClass: aBlogItemToCategory
      local: blog_item_id
      foreign: category_id
    Comments:
      class: arComment
      local: id
      foreign: a_blog_item_id
      foreignAlias: BlogItem
    Messages:
      foreignAlias: BlogItem
      class: arWallMessage
      refClass: arWallMessageHasBlogItem
      local: a_blog_item_id
      foreign: wall_message_id
      onDelete: CASCADE
    EncExcerpt:
      class: arExcerptEnc
      local: id
      foreign: a_blog_item_id

arComment:
  actAs:
    Timestampable: ~
  columns:
    id:
      type: integer
      primary: true
      autoincrement: true
    user_id:
      type: integer
      notnull: false
      default: null
    parent: integer
    a_blog_item_id: integer
    ip: string(16)
    comment_approved:
      type: boolean
      default: false
    comment: clob(65532)
    comment_author: clob(255)
    comment_author_email: string(100)
    comment_author_url: string(200)
    comment_agent: string(255) 
  relations:
    BlogItem:
      class: aBlogItem
      local: a_blog_item_id
      foreign: id
      foreignAlias: EntryComments
      onDelete: CASCADE
    User:
      class: sfGuardUser
      local: user_id
      foreign: id
      foreignAlias: UserComments
      onDelete: SET NULL
      
aBlogEditor:
  columns:
    blog_item_id: 
      type: integer
      primary: true
    user_id:
      type: integer
      primary: true
  relations:
    BlogItem:
      foreignAlias: BlogItemEditors
      class: aBlogItem
      local: blog_item_id
      onDelete: CASCADE
    Editor:
      foreignAlias: BlogItemEditors
      class: sfGuardUser
      local: user_id
      onDelete: CASCADE
      
aBlogItemToCategory:
  columns:
    blog_item_id:
      type: integer
      primary: true
    category_id:
      type: integer
      primary: true
  relations:
    BlogItem:
      foreignAlias: BlogItemCategories
      class: aBlogItem
      local: blog_item_id
      onDelete: CASCADE
    Category:
      foreignAlias: BlogItemCategories
      class: aCategory
      local: category_id
      onDelete: CASCADE

# Extend with more relations.
# This plugin must now be loaded AFTER
# the main apostrophePlugin
aCategory:
  relations:
    BlogItems:
      foreignAlias: BlogCategories
      class: aBlogItem
      refClass: aBlogItemToCategory
      local: category_id
      foreign: blog_item_id
          
aBlogPost:
  inheritance:
    extends: aBlogItem
    type: column_aggregation
    keyField: type
    keyValue: 'post'    
      
aBlogSlot:
  options:
    symfony:
      form:   false
      filter: false
  inheritance:
    extends: aSlot
    type: column_aggregation
    keyField: type
    keyValue: 'aBlog'
      
aBlogSingleSlot:
  options:
    symfony:
      form:   false
      filter: false
  inheritance:
    extends: aSlot
    type: column_aggregation
    keyField: type
    keyValue: 'aBlogSingle'
    
aEvent:
  inheritance:
    extends: aBlogItem
    type: column_aggregation
    keyField: type
    keyValue: 'event'
  columns:
    start_date: date
    start_time: time
    end_date:   date
    end_time:   time
    location: string(300)
    
aEventSlot:
  options:
    symfony:
      form:   false
      filter: false
  inheritance:
    extends: aSlot
    type: column_aggregation
    keyField: type
    keyValue: 'aEvent'
      
aEventSingleSlot:
  options:
    symfony:
      form:   false
      filter: false
  inheritance:
    extends: aSlot
    type: column_aggregation
    keyField: type
    keyValue: 'aEventSingle'