<?php

/**
 * PluginarLavernaDocTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginarLavernaDocTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PluginarLavernaDocTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PluginarLavernaDoc');
    }
     /**
     * devuelve los documentos por ids
     *
     * @param <array $ids>
     * @param [int $profileId] : opcional. $profileId no se usa al guardar
     * 
     * @return <array>
     */
    public static function getByIds($ids, $profileId = false)
    {
        $q =  Doctrine::getTable('arLavernaDoc')->createQuery('d')
              ->whereIn('d.id',$ids)
               
            ->orderBy('d.created_at DESC');
        
        if ($profileId && sfConfig::get('app_arquematics_encrypt', false))
        {
           $q->leftJoin('d.EncContent ec ON (d.id = ec.laverna_id)')
              ->andWhere('ec.user_id = ?',$profileId);
        }
        //echo $q->getSqlQuery();
        return $q->execute();
    }
    
    /**
     * documentos compartidos para un usuario
     * 
     * @param int $profileId
     * @return query
     */
    public static function getQueryByUserId($profileId, $conn = false)
    {
        $q = Doctrine::getTable('arLavernaDoc')
             ->createQuery('d')
             ->leftJoin('d.Messages m')
             ->leftJoin('d.LavernaDeleted ld')
             ->leftJoin('d.LavernaTrash dt')
             
             ->leftJoin('m.User u')
             ->leftJoin('u.Friends f ON ((f.profile_id = u.id) OR (f.friend_id = u.id))')
             ->leftJoin('m.arWallMessageHasProfileList mhpl')
             ->leftJoin('mhpl.List l')
             ->leftJoin('l.arProfileListHasProfile plhp')
             ->where('(d.user_id = ?)  
                    OR ((l.profile_id = ?) AND (plhp.profile_id = ?)) 
                    OR (l.profile_id is NULL 
                                AND f.is_accept = true 
                                AND f.is_ignore = false  
                                AND ((f.profile_id = ?) OR (f.friend_id = ?)))', array($profileId,$profileId, $profileId,$profileId, $profileId))
            ->andWhere('(ld.user_id <> ?) OR (ld.user_id IS NULL)',$profileId);
            //->orderBy('d.created_at DESC');
        
        if ($profileId && sfConfig::get('app_arquematics_encrypt', false))
        {
           $q->leftJoin('d.EncContent ec')
              ->andWhere('ec.user_id = ?',$profileId);
        }
        
        if ($conn)
        {
           $q->setConnection($conn);  
        }
        
        return $q;
    }
    
    /**
     * documentos compartidos para un usuario
     * 
     * @param int $profileId
     * @return query
     */
    public static function getShareQueryByUserId($profileId, $conn = false)
    {
        $q = Doctrine::getTable('arLavernaDoc')
             ->createQuery('d')
             ->leftJoin('d.Messages m')
             ->leftJoin('m.User u')
             ->leftJoin('u.Friends f ON ((f.profile_id = u.id) OR (f.friend_id = u.id))')
             ->leftJoin('m.arWallMessageHasProfileList mhpl')
             ->leftJoin('mhpl.List l')
             ->leftJoin('l.arProfileListHasProfile plhp')  
             ->where('((l.profile_id = ?) AND (plhp.profile_id = ?)) 
                      OR (l.profile_id is NULL 
                                AND f.is_accept = true 
                                AND f.is_ignore = false  
                                AND ((f.profile_id = ?) OR (f.friend_id = ?)))', array($profileId, $profileId,$profileId, $profileId))
            
            //->groupBy('d.id')
            ->orderBy('d.created_at DESC');
        
        if ($profileId && sfConfig::get('app_arquematics_encrypt', false))
        {
           $q->leftJoin('d.EncContent ec')
              ->andWhere('ec.user_id = ?',$profileId);
        }
        
        if ($conn)
        {
           $q->setConnection($conn);  
        }
        
        return $q;
    }
    
    
     /**
      * 
      * documento compartido en algun mensaje
      * 
      * @param <int $profileId>
      * @param <int $docId>
      * @param <$conn $conn>
      * 
      * @return boolean
      */
     public static function hasShareDoc($profileId, $docId,  $conn = false)
     {
        $q = Doctrine::getTable('arLavernaDoc')
             ->getShareQueryByUserId($profileId, $conn)
              ->andWhere('d.id = ?',$docId)
                ->select('COUNT(d.id)');
        
        return ($q->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR) > 0); 
     }
    
    /**
     * cuenta los documentos no borrados
     * 
     * @param type $profileId
     * @param type $trash
     * @param type $isFavorite
     * @return int
     */
    public static function countByUserId($profileId, $docType, $trash, $isFavorite)
    {
        $q =Doctrine::getTable('arLavernaDoc')
             ->getQueryByUserId($profileId)
             ->select('COUNT(DISTINCT(d.id))');
        
        if ($docType !== false)
        {
           $q->andWhere('d.type like ?',$docType);  
        }
        
        if ($trash)
        {
          $q->andWhere('dt.user_id = ?',$profileId); 
        }
        else {
          $q->andWhere('dt.user_id IS NULL'); 
        }
        
        if ($isFavorite)
        {
            $q->leftJoin('d.LavernaFavorite df')
              ->andWhere('df.user_id = ?',$profileId); 
        }
        
        return $q->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
    }
    /**
     * listado de documentos no borrados
     * sin contenido , solo la id y la fecha de modificacion
     * 
     * @param $profileId
     * @return array 
     */
    public static function getQuerySimpleByUserId($profileId, $docType, $trash, $isFavorite)
    {
        $q = Doctrine::getTable('arLavernaDoc')
             ->getQueryByUserId($profileId)
               // ->andWhere('d.trash = ?',$trash)
                ->select('d.guid as id,
                    d.title as title,
                    d.content as content,
                    d.task_all as taskAll,
                    d.type as diagramType,
                    d.data_image as dataImage,
                    d.task_complete as taskCompleted,
                    d.created_at as created,
                    d.updated_at as updated,
                    IF(dt.id IS NULL,0,1) as trash,
                    IF(df.id IS NULL,0,1) as isFavorite,
                    ec.content as pass');
        
        if ($docType !== false)
        {
           $q->andWhere('d.type like ?',$docType);  
        }
        
        if ($trash)
        {
          $q->andWhere('dt.user_id = ?',$profileId)
           ->orderBy('dt.updated_at DESC'); 
        }
        else 
        {
          $q->andWhere('dt.user_id IS NULL'); 
        }
        
        if ($isFavorite)
        {
            $q->leftJoin('d.LavernaFavorite df')
              ->andWhere('df.user_id = ?',$profileId)
              ->orderBy('df.updated_at DESC');
        }
        else
        {
           $q->leftJoin('d.LavernaFavorite df ON (d.id = df.laverna_id AND df.user_id = ?)',$profileId);
        }
        
        //orden
        if ((!$trash) && (!$isFavorite))
        {
           $q->orderBy('d.created_at DESC');
        }
        
        
        return $q;
         /*       ->select('d.guid as id,
                    d.title as title,
                    d.content as content,
                    lf.guid as images,
                    d.task_all as taskAll
                    d.task_complete as taskCompleted,
                    d.created_at as created,
                    d.updated_at as updated,
                    d.is_favorite as isFavorite,
                    d.trash as trash,
                    d.EncContent.content as pass');*/
                
             //->select('d.guid as guid, UNIX_TIMESTAMP(d.updated_at) as modified');
    }
    
    public static function getByUserId($profileId)
    {
        $q = Doctrine::getTable('arLavernaDoc')
             ->getQueryByUserId($profileId);
            
        return $q->execute();
    }
    
    
    public static function getByMenssage($messageId, $profileId = false, $conn = false)
    {
        
         $q = Doctrine::getTable('arLavernaDoc')->createQuery('l')
            ->leftJoin('l.arLavernaDocHasArWallMessage lm')
            ->where('lm.wall_message_id = ?',$messageId);
         
         if ($profileId && sfConfig::get('app_arquematics_encrypt', false))
         {
             
           $q->leftJoin('l.EncContent ec ON (l.id = ec.laverna_id AND ec.user_id = ?)',$profileId)
              ->andWhere('ec.user_id = ?',$profileId);
         }
         
         if ($conn)
         {
           $q->setConnection($conn);  
         }
       
         
         //echo $q->getSqlQuery();
         
         return $q->execute();
    }

    public static function isValidGui($gui)
    {
         $q = Doctrine::getTable('arLavernaDoc')
             ->createQuery('l')
             ->where('l.guid like ?', array($gui))
             ->select('count(l.id)');

        return ($q->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR) > 0);
    }
    
    
    
    
}