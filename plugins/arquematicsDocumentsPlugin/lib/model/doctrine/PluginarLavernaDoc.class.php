<?php

/**
 * PluginarLavernaDoc
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginarLavernaDoc extends BasearLavernaDoc
{
    const NOTE           = 10;
    const SVG           = 20;
    const WIREFRAME     = 30;
    const MINDMAPS      = 40;
    const BPMN          = 50;
    const EPC           = 60;
    const UML           = 70;
    const RAWCHART      = 80;
    const SEQUENCE      = 90;
    const USECASE       = 100;
    const SIMPLE_IMAGE  = 110;
    const PETRI         = 120;
    
    
    static protected $types = array(
        
        
        
         'paint' => array( 'id' => self::SIMPLE_IMAGE,
                           'name' => 'paint',
                           'template' => 'simpleImage',
                           //'out' => 'data:image/png;base64',
                           'out' => 'data:image/png;base64',
                           'class' => 'ar-icon-image ar-icon-big',
                           'classMini' => 'ar-icon-small-image ar-icon-small',
                           'classInverse' => 'ar-inverse-image',
                           'extra' => false),
        
         'mindmaps' => array('id' => self::MINDMAPS,
                            'name' => 'mindmaps',
                            'template' => 'mindmap',
                            'out' => 'data:image/png;base64',
                            'class' => 'ar-icon-minmaps ar-icon-big',
                            'classMini' => 'ar-icon-minmaps ar-icon-small',
                            'classInverse' => 'ar-inverse-minmaps',
                            'extra' => false),
        
         /*
         'wireframe' => array('id' =>           self::WIREFRAME,
                            'name' =>           'wireframe',
                            'template' =>       'wireframe',
                            'out' =>            'data:image/png;base64',
                            'class' =>          'ar-icon-wireframe ar-icon-big',
                            'classMini' =>      'ar-icon-wireframe ar-icon-small',
                            'classInverse' =>   'ar-inverse-browser',
                            'extra' => false),
                            */
        
         'note' => array( 'id' =>               self::NOTE,
                           'name' =>            'note',
                           'template' =>        'note',
                           'out' =>             'svg',                  
                           'class' =>           'ar-icon-document ar-icon-big',
                           'classMini' =>       'ar-icon-document ar-icon-small',
                           'classInverse' =>    'ar-inverse-document',
                           'extra' => false),
        
         'svg' => array('id' =>                 self::SVG,
                        'name' =>               'svg',
                        'template' =>           'svg',
                        'out' =>                'svg',
                        'class' =>              'ar-icon-image ar-icon-big',
                        'classMini' =>          'ar-icon-image ar-icon-small',
                        'classInverse' =>       'ar-inverse-image',
                        'extra' => false),
        
         'rawchart' => array('id' =>            self::SVG,
                        'name' =>               'rawchart',
                        'template' =>           'rawchart',
                        'out' =>                'svg',
                        'class' =>              'ar-icon-bar-chart ar-icon-big',
                        'classMini' =>          'ar-icon-bar-chart ar-icon-small',
                        'classInverse' =>       'ar-inverse-bar-chart',
                        'extra' => false),
        
         'bpmn' => array('id' =>                self::BPMN,
                        'name' =>               'bpmn',
                        'template' =>           'diagram',
                        'out' =>                'svg',
                        'class' =>              'ar-icon-bpmn ar-icon-big',
                        'classMini' =>          'ar-icon-bpmn ar-icon-small',
                        'classInverse' =>       'ar-inverse-bpmn',
                        'extra' =>              '/bpmn1.1/bpmn1.1.json'),

         'wireframe' => array('id' =>           self::WIREFRAME,
                        'name' =>               'wireframe',
                        'template' =>           'diagram',
                        'out' =>                'svg',
                        'class' =>              'ar-icon-wireframe ar-icon-big',
                        'classMini' =>          'ar-icon-wireframe ar-icon-small',
                        'classInverse' =>       'ar-inverse-browser',
                        'extra' =>              '/wireframe/wireframe.json'),

        
         'epc' => array('id' =>                 self::EPC,
                        'name' =>               'epc',
                        'template' =>           'diagram',
                        'out' =>                'svg',
                        'class' =>              'ar-icon-epc ar-icon-big',
                        'classMini' =>          'ar-icon-epc ar-icon-small',
                        'classInverse' =>       'ar-inverse-epc',
                        'extra' =>              '/epc/epc.json'),
        
         'uml' => array('id' =>                 self::UML,
                       'name' =>                'uml',
                       'template' =>            'diagram',
                       'out' =>                 'svg',
                       'class' =>               'ar-icon-uml ar-icon-big',
                       'classMini' =>           'ar-icon-uml ar-icon-small',
                       'classInverse' =>        'ar-inverse-uml',
                       'extra' =>               '/uml2.2/uml2.2.json'),
        
         'umlsequence' => array('id' =>         self::SEQUENCE,
                                'name' =>       'umlsequence',
                                'template' =>   'diagram',
                                'out' =>        'svg',
                                'class' =>      'ar-icon-sequence ar-icon-big',
                                'classMini' =>  'ar-icon-sequence ar-icon-small',
                                'classInverse' =>        'ar-inverse-sequence',
                                'extra' =>      '/umlsequence/umlsequence.json'),
        
         'umlusecase' => array('id' =>          self::USECASE,
                               'name' =>        'umlusecase',
                               'template' =>    'diagram',
                               'out' =>         'svg',
                               'class' =>       'ar-icon-usecase ar-icon-big',
                               'classMini' =>   'ar-icon-usecase ar-icon-small',
                               'classInverse' =>        'ar-inverse-usecase',
                               'extra' =>       '/umlusecase/umlusecase.json'),
        
         'petrinet' => array('id' =>            self::PETRI,
                            'name' =>           'umlsequencepetri',
                            'template' =>       'diagram',
                             //TODO: No icon 
                            'out' =>            'svg',
                            'class' =>          'ar-icon-usecase ar-icon-big',
                            'classMini' =>      'ar-icon-usecase ar-icon-small',
                            'classInverse' =>        'ar-inverse-usecase',
                            'extra' =>          '/petrinets/petrinet.json'
         )
    );

    public $info = false;
    
    /**
     * mira si es un nombre valido de diagrama
     * 
     * @param <string $name>
     * @return boolean 
     */
    public static function isNameType($name)
    {
        $diagramKeyList = array_keys(arLavernaDoc::$types);
        
        return in_array($name, $diagramKeyList);
    }

    /**
     * mira si es diagrama para Oryx
     * 
     * @param <string $name>
     * @return boolean 
     */
    public static function isOryxName($name)
    {
        return in_array($name, array('bpmn',
                                    'epc',
                                    'wireframe',
                                    'uml',
                                    'umlsequence',
                                    'umlusecase'));
    }


    public static function isRawChart($name)
    {
        return ($name === 'rawchart');
    }

    
    /**
     * array con los tipos de diagramas habilitados
     * 
     * @return <array of string>
     */
    public static function getEnabled()
    {
        $editorEnabledList = sfConfig::get( 'app_arquematics_editor_enabled');
   
        $ret = array();
        
        if ($editorEnabledList && (count($editorEnabledList) > 0))
        {
            $diagramKeyList = array_keys(arLavernaDoc::$types);
            $order = 0;
            
            foreach ($editorEnabledList as $editorEnabled)
            {
               if ($editorEnabled && in_array($editorEnabled, $diagramKeyList))
               {
                   //aÃ±ade el orden
                   $ret[] = array_merge(arLavernaDoc::$types[$editorEnabled], array('order' => $order));
               }
               //si no se puede editar con este modulo
               //no se asigna su orden
               $order++;
            }
            
        }
        /*
        //ordena por el orden en el que estan en app.yml
        if ($ret && (count($ret) > 0))
        {
            usort($ret, function($a, $b) {
                return $a['order'] - $b['order'];
            });
        }*/
        
        return $ret;
    }

    /**
     * 
     * devuelve la informacion para visualizar/editar/mostrar icono del diagrama
     * 
     * @param <string $name>
     * @return <array>
     */
    public static function getTypeByName($name)
    {
       return  isset(arLavernaDoc::$types[$name])?arLavernaDoc::$types[$name]:false;
    }
    
    public function getInfo()
    {
      return isset(arLavernaDoc::$types[$this->getType()])?arLavernaDoc::$types[$this->getType()]:array();
    }
    
    public function isNoteType()
    {
        return ($this->getType() === 'note');
    }
    
    public function isRawchartType()
    {
        return ($this->getType() === 'rawchart');
    }
    
    public function isOryxType()
    {
        return self::isOryxName($this->getType());
    }

    /*
    public function getFiles()
    {
        $countFiles = Doctrine_Core::getTable('arLavernaFile')
                ->countGuidByDocId($this->getId()); 

         $filesArray = array();

        if ($countFiles > 1)
        {
            $filesArray = Doctrine_Core::getTable('arLavernaFile')
                                ->getGuidByDocId($this->getId());
        }
        else if ($countFiles > 0)
        {
          $filesArray = array(Doctrine_Core::getTable('arLavernaFile')
                                ->getGuidByDocId($this->getId()));  
        }

        return $filesArray;
    }*/
    
    
    /**
     * devuelve un array para serializar JSON
     * @return array
     */
    public function loadDocInfo($profileId, $documents = array())
    {
        $trash = Doctrine::getTable('arLavernaDocTrash')
                    ->hasDocProfile($this->getId(), $profileId);
        
        $isFavorite = Doctrine::getTable('arLavernaDocFavorite')
                        ->hasDocProfile($this->getId(), $profileId);

	$countFiles = Doctrine_Core::getTable('arLavernaFile')
                ->countGuidByDocId($this->getId());

        $share = (in_array($this->getId(),$documents));
        
        $filesArray = array();
        
        if ($countFiles > 1)
        {
            $filesArray = Doctrine_Core::getTable('arLavernaFile')
                                ->getGuidByDocId($this->getId());
        }
        else if ($countFiles > 0)
        {
          $filesArray = array(Doctrine_Core::getTable('arLavernaFile')
                                ->getGuidByDocId($this->getId()));  
        }

        
        if (sfConfig::get('app_arquematics_encrypt', false))
        {
          $this->EncContent = Doctrine_Core::getTable('arLavernaDocEnc')
                                ->retrieveByProfileId($this->getId(),$profileId);  
        
          return array('id' => $this->getGuid(),
                'title'  => $this->getTitle(),
                'created' => $this->getCreatedAt(),
                'updated' => $this->getUpdatedAt(),
                'diagramType' => $this->getType(),
                'content'    => $this->getContent(),
                'dataImage' => $this->getDataImage(),
		        'images' => $filesArray,
                'isFavorite' => ($isFavorite)? 1:0,
                'trash' => ($trash)? 1:0,
                //'dataImage' => $this->getDataImage(),
                //despues de create (POST) o update (PUT) enviar el dato
                //nunca compartimos 0, 
                'guid' => $this->getGuid(),
                'share' => ($share)?1:0,
                'pass' => $this->EncContent->getContent());
        }
        else
        {
             return array('id' => $this->getGuid(),
                'title'  => $this->getTitle(), 
                'created' => $this->getCreatedAt(),
                'updated' => $this->getUpdatedAt(),
                'diagramType' => $this->getType(),
                'content'    => $this->getContent(),
		        'images' => $filesArray,
                'isFavorite' => ($isFavorite)? 1:0,
                'trash' => ($trash)? 1:0,
                //'dataImage' => $this->getDataImage(),
                //despues de create (POST) o update (PUT) enviar el dato
                //nunca compartimos 0, 
                'guid' => $this->getGuid(),
                'share' => ($share)?1:0,
                'pass' => false);
        }     
    }
    
    
    public function isSelfUser($userProfileId)
    {
       return  ($this->getUserId() === $userProfileId);
    }
    public function conditionalDelete($userProfileId)
    {
        $conn = $this->getTable()->getConnection();
        $conn->beginTransaction();
        
        try
        {
            //el documento es del usuario
            /*
            if ($this->getUserId() == $userProfileId)
            {
                $this->setDeleted(1);
                $this->save($conn);
            }*/

            //crea el documento borrado si procede
            if (!Doctrine_Core::getTable('arLavernaDocDelete')
                        ->hasUserAndDoc($userProfileId, $this->getId(), $conn))
            {
                $arLavernaDocDelete = new arLavernaDocDelete();
                $arLavernaDocDelete->setUserId($userProfileId);
                $arLavernaDocDelete->setLavernaId($this->getId());
                $arLavernaDocDelete->save($conn);
            }
            
            $conn->commit();
            
            return true;
        }
        catch (Exception $e)
        {
            $conn->rollBack();
            throw $e;
        
            return false;
        }
       
    }
    /*
    public function preDelete($event)
    {
        // this tells the system to NOT delete the record, and just go directly to postDelete()
        $event->skipOperation();
    }*/
    /**
     * lista con las ids para las que ha sido
     * codificado el documento
     * 
     * @return <array>
     */
    public function getUserEncodedIds()
    {
        return Doctrine_Core::getTable('arLavernaDocEnc')
                ->retrieveUserById($this->getId());
    }

    public function getIcon()
    {
        if (!$this->info)
        {
            $this->info = $this->getInfo();
        }
        return $this->info['classMini'];
    }

   
    /**
     * true si el documento actual esta compartido para el
     * usuario
     * 
     * @param <int $profileId>
     * @return <boolean> : true si esta compartido
     */
    public function hasShareDoc($profileId)
    {
       return Doctrine_Core::getTable('arLavernaDoc')
             ->hasShareDoc($profileId, $this->getId()); 
    }
     
    
    /**
     * carga la informacion para mostrar el 
     * pass encriptado del objeto
     * 
     * @param <int $profileId>
     */
    public function loadPass($profileId)
    {
        $this->EncContent = Doctrine_Core::getTable('arLavernaDocEnc')
                            ->retrieveByProfileId($this->getId(),$profileId);
    }
    
    public function getFiles()
    {
       return Doctrine_Core::getTable('arLavernaFile')
                ->getSimpleByDocId($this->getId());
    }

    public function getFilesArrString()
    {
        $files = $this->getFiles();
        $countFiles = count($files);
        $ret = '';
        $index = 0;
        if ($files && count($files) > 0)
        {
            foreach ($files as $file)
            {
                $ret .= '"'.$file['id'].'"';
                $index++;
                if ($index < $countFiles)
                {
                    $ret .= ',';
                }
            }
        }
        return  '['. $ret .']';
    }

    public function getFileObj($fileGuiId)
    {
       return Doctrine_Core::getTable('arLavernaFile')
                ->getDocFileObj($this->getId(), $fileGuiId);
    }
    
    
    public function getFile($fileGuiId)
    {
       return Doctrine_Core::getTable('arLavernaFile')
                ->getDocFile($this->getId(), $fileGuiId);
    }
    
    public function hasFile($fileGuiId)
    {
       return Doctrine_Core::getTable('arLavernaFile')
                ->hasDocFile($this->getId(), $fileGuiId); 
    }
    /*
    public function getDocumentType()
    {
        //document-type
    }*/
    
   
}
